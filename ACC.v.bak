module ACC
	#(	parameter DataWidth = 32,
		parameter Pipeline_Stages = 7)
	(clk, rst, DataInValid, DataIn, DataOutValid, DataOut);
	input clk, rst;
	input DataInValid;
	input [DataWidth - 1 : 0] DataIn;

	reg [DataWidth - 1 : 0] AccumulatedData;

	output DataOutValid;
	output [DataWidth - 1 : 0] DataOut;

	wire EnACC;
	wire NOPIn, NOPOut;

	assign NOPIn = ~DataInValid;
	assign EnACC = ~NOPOut;
    
	//32-bit FP add (7 Stages)
    FP_ADD FP_AddUnit(
        .aclr(rst),
        .clock(clk),
        .dataa(DataIn),
        .datab(AccumulatedData)),
        .result(AccumulatedResult));

    NOPPipeline #(.Stages(Pipeline_Stages)) NOPPipelineUnit
        (.clk(clk), 
        .aclr(rst),
        .NOPIn(NOPIn), 
        .NOPOut(NOPOut));

	always @(posedge clk, posedge rst) begin
		if(rst)
			AccumulatedData = 0;
		else if(EnACC)
			AccumulatedData <= AccumulatedData + DataOut;
		else
			AccumulatedData <= AccumulatedData;
	end

	assign DataOut = AccumulatedData;
	assign DataOutValid = EnACC;

endmodule
